
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftPLUSMINUSleftTIMESDIVIDEleftLESSMOREEQUALrightPLUSASSIGNMINUSASSIGNASSIGNAND ASSIGN COLON COMMA DIVIDE DO ELIF ELSE EQUAL ID IF LBRACE LESS LPAREN MINUS MINUSASSIGN MORE NOTEQUAL NUMBER OR PLUS PLUSASSIGN PRINT RBRACE RPAREN SEMICOLON TIMES WHILEstatements : statement\n        | statements statementstatement_list : statement\n        | statement statement_liststatement : ID ASSIGN expression SEMICOLONstatement : ID PLUSASSIGN expression SEMICOLON\n        | ID MINUSASSIGN expression SEMICOLONstatement : expression SEMICOLONexpression : expression PLUS expression\n        | expression MINUS expression\n        | expression TIMES expression\n        | expression DIVIDE expressionexpression : expression EQUAL expression\n        | expression NOTEQUAL expression\n        | expression LESS expression\n        | expression MORE expressionexpression : expression OR expressionexpression : expression AND expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDstatement : DO LBRACE statement_list RBRACEstatement : DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMICOLONexpression_list : expression\n        | expression_list COMMA expressionstatement : PRINT LPAREN expression_list RPAREN SEMICOLONstatement : IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_blocks ELSE LBRACE statement_list RBRACE\n        | IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_blocks\n        | IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE\n        | IF LPAREN expression RPAREN LBRACE statement_list RBRACE\n        elif_blocks : ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_blocks\n        | ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE\n        '
    
_lr_action_items = {'ID':([0,1,2,6,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,28,29,44,49,50,51,52,55,58,60,61,64,66,69,71,72,73,77,79,80,82,83,],[3,3,-1,27,-2,27,27,27,-8,27,27,27,27,27,27,27,27,27,27,3,27,27,3,-5,-6,-7,-22,27,-26,3,27,-30,-28,-23,3,27,3,-29,-27,3,-32,-31,]),'DO':([0,1,2,10,14,25,44,49,50,51,52,58,60,64,66,69,71,73,77,79,80,82,83,],[5,5,-1,-2,-8,5,5,-5,-6,-7,-22,-26,5,-30,-28,-23,5,5,-29,-27,5,-32,-31,]),'PRINT':([0,1,2,10,14,25,44,49,50,51,52,58,60,64,66,69,71,73,77,79,80,82,83,],[7,7,-1,-2,-8,7,7,-5,-6,-7,-22,-26,7,-30,-28,-23,7,7,-29,-27,7,-32,-31,]),'IF':([0,1,2,10,14,25,44,49,50,51,52,58,60,64,66,69,71,73,77,79,80,82,83,],[8,8,-1,-2,-8,8,8,-5,-6,-7,-22,-26,8,-30,-28,-23,8,8,-29,-27,8,-32,-31,]),'LPAREN':([0,1,2,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,28,29,44,49,50,51,52,55,57,58,60,61,64,66,68,69,71,72,73,77,79,80,82,83,],[6,6,-1,6,28,29,-2,6,6,6,-8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-5,-6,-7,-22,6,61,-26,6,6,-30,-28,72,-23,6,6,6,-29,-27,6,-32,-31,]),'NUMBER':([0,1,2,6,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,28,29,44,49,50,51,52,55,58,60,61,64,66,69,71,72,73,77,79,80,82,83,],[9,9,-1,9,-2,9,9,9,-8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-5,-6,-7,-22,9,-26,9,9,-30,-28,-23,9,9,9,-29,-27,9,-32,-31,]),'$end':([1,2,10,14,49,50,51,52,58,64,66,69,77,79,82,83,],[0,-1,-2,-8,-5,-6,-7,-22,-26,-30,-28,-23,-29,-27,-32,-31,]),'ASSIGN':([3,],[11,]),'PLUSASSIGN':([3,],[12,]),'MINUSASSIGN':([3,],[13,]),'SEMICOLON':([3,4,9,27,30,31,32,33,34,35,36,37,38,39,40,41,42,45,54,65,],[-21,14,-20,-21,49,50,51,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,58,69,]),'PLUS':([3,4,9,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,45,47,48,59,63,75,],[-21,15,-20,15,-21,15,15,15,-9,-10,-11,-12,-13,15,-15,-16,15,15,-19,15,15,15,15,15,]),'MINUS':([3,4,9,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,45,47,48,59,63,75,],[-21,16,-20,16,-21,16,16,16,-9,-10,-11,-12,-13,16,-15,-16,16,16,-19,16,16,16,16,16,]),'TIMES':([3,4,9,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,45,47,48,59,63,75,],[-21,17,-20,17,-21,17,17,17,17,17,-11,-12,-13,17,-15,-16,17,17,-19,17,17,17,17,17,]),'DIVIDE':([3,4,9,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,45,47,48,59,63,75,],[-21,18,-20,18,-21,18,18,18,18,18,-11,-12,-13,18,-15,-16,18,18,-19,18,18,18,18,18,]),'EQUAL':([3,4,9,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,45,47,48,59,63,75,],[-21,19,-20,19,-21,19,19,19,19,19,19,19,-13,19,-15,-16,19,19,-19,19,19,19,19,19,]),'NOTEQUAL':([3,4,9,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,45,47,48,59,63,75,],[-21,20,-20,20,-21,20,20,20,-9,-10,-11,-12,-13,20,-15,-16,-17,-18,-19,20,20,20,20,20,]),'LESS':([3,4,9,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,45,47,48,59,63,75,],[-21,21,-20,21,-21,21,21,21,21,21,21,21,-13,21,-15,-16,21,21,-19,21,21,21,21,21,]),'MORE':([3,4,9,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,45,47,48,59,63,75,],[-21,22,-20,22,-21,22,22,22,22,22,22,22,-13,22,-15,-16,22,22,-19,22,22,22,22,22,]),'OR':([3,4,9,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,45,47,48,59,63,75,],[-21,23,-20,23,-21,23,23,23,-9,-10,-11,-12,-13,23,-15,-16,-17,-18,-19,23,23,23,23,23,]),'AND':([3,4,9,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,45,47,48,59,63,75,],[-21,24,-20,24,-21,24,24,24,-9,-10,-11,-12,-13,24,-15,-16,24,-18,-19,24,24,24,24,24,]),'LBRACE':([5,56,67,70,78,],[25,60,71,73,80,]),'RPAREN':([9,26,27,33,34,35,36,37,38,39,40,41,42,45,46,47,48,59,63,75,],[-20,45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,54,-24,56,-25,65,78,]),'COMMA':([9,27,33,34,35,36,37,38,39,40,41,42,45,46,47,59,],[-20,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,55,-24,-25,]),'RBRACE':([14,43,44,49,50,51,52,53,58,62,64,66,69,74,76,77,79,81,82,83,],[-8,52,-3,-5,-6,-7,-22,-4,-26,64,-30,-28,-23,77,79,-29,-27,82,-32,-31,]),'WHILE':([52,],[57,]),'ELSE':([64,66,82,83,],[67,70,-32,-31,]),'ELIF':([64,82,],[68,68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,],[1,]),'statement':([0,1,25,44,60,71,73,80,],[2,10,44,44,44,44,44,44,]),'expression':([0,1,6,11,12,13,15,16,17,18,19,20,21,22,23,24,25,28,29,44,55,60,61,71,72,73,80,],[4,4,26,30,31,32,33,34,35,36,37,38,39,40,41,42,4,47,48,4,59,4,63,4,75,4,4,]),'statement_list':([25,44,60,71,73,80,],[43,53,62,74,76,81,]),'expression_list':([28,],[46,]),'elif_blocks':([64,82,],[66,83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statement','statements',1,'p_statements','parser.py',22),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',23),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> ID ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','parser.py',40),
  ('statement -> ID PLUSASSIGN expression SEMICOLON','statement',4,'p_statement_assign_op','parser.py',45),
  ('statement -> ID MINUSASSIGN expression SEMICOLON','statement',4,'p_statement_assign_op','parser.py',46),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','parser.py',54),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',59),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',60),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',61),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',62),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_comparison','parser.py',67),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_comparison','parser.py',68),
  ('expression -> expression LESS expression','expression',3,'p_expression_comparison','parser.py',69),
  ('expression -> expression MORE expression','expression',3,'p_expression_comparison','parser.py',70),
  ('expression -> expression OR expression','expression',3,'p_expression_or','parser.py',75),
  ('expression -> expression AND expression','expression',3,'p_expression_and','parser.py',80),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',85),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',90),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',95),
  ('statement -> DO LBRACE statement_list RBRACE','statement',4,'p_statement_do','parser.py',100),
  ('statement -> DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMICOLON','statement',9,'p_statement_do_while','parser.py',105),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',110),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',111),
  ('statement -> PRINT LPAREN expression_list RPAREN SEMICOLON','statement',5,'p_statement_print','parser.py',119),
  ('statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_blocks ELSE LBRACE statement_list RBRACE','statement',12,'p_statement_if','parser.py',124),
  ('statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_blocks','statement',8,'p_statement_if','parser.py',125),
  ('statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','statement',11,'p_statement_if','parser.py',126),
  ('statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE','statement',7,'p_statement_if','parser.py',127),
  ('elif_blocks -> ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_blocks','elif_blocks',8,'p_statement_elif_blocks','parser.py',141),
  ('elif_blocks -> ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE','elif_blocks',7,'p_statement_elif_blocks','parser.py',142),
]
