
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftLESSMOREEQUALASSIGN COLON DIVIDE DO ELIF ELSE EQUAL ID IF LBRACE LESS LPAREN MINUS MORE NUMBER PLUS PRINT RBRACE RPAREN SEMICOLON TIMES WHILEstatement : ID ASSIGN expression SEMICOLONstatement : expression SEMICOLONexpression : expression PLUS expression\n        | expression MINUS expression\n        | expression TIMES expression\n        | expression DIVIDE expression\n        | expression LESS expression\n        | expression MORE expression\n        | expression EQUAL expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDstatement : DO LBRACE statement_list RBRACEstatement : DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMICOLONstatement_list : statement\n        | statement statement_liststatement : PRINT LPAREN expression RPARENstatement : IF LPAREN expression RPAREN LBRACE statement RBRACE\n        | IF LPAREN expression RPAREN RPAREN statement RBRACE ELIF LPAREN expression RPAREN RPAREN statement RBRACE\n        | IF LPAREN expression RPAREN RPAREN statement RBRACE ELSE RPAREN statement RBRACE\n        | IF LPAREN expression RPAREN RPAREN statement RBRACE ELIF LPAREN expression RPAREN RPAREN statement RBRACE ELSE COLON statement RBRACE\n        '
    
_lr_action_items = {'ID':([0,5,9,10,11,12,13,14,15,16,17,18,21,22,32,36,37,39,42,43,44,49,53,54,55,59,60,62,64,66,],[2,20,20,-2,20,20,20,20,20,20,20,2,20,20,2,-1,-13,-17,2,2,20,-18,-14,20,2,-20,2,-19,2,-21,]),'DO':([0,10,18,32,36,37,39,42,43,49,53,55,59,60,62,64,66,],[4,-2,4,4,-1,-13,-17,4,4,-18,-14,4,-20,4,-19,4,-21,]),'PRINT':([0,10,18,32,36,37,39,42,43,49,53,55,59,60,62,64,66,],[6,-2,6,6,-1,-13,-17,6,6,-18,-14,6,-20,6,-19,6,-21,]),'IF':([0,10,18,32,36,37,39,42,43,49,53,55,59,60,62,64,66,],[7,-2,7,7,-1,-13,-17,7,7,-18,-14,7,-20,7,-19,7,-21,]),'LPAREN':([0,5,6,7,9,10,11,12,13,14,15,16,17,18,21,22,32,36,37,39,41,42,43,44,49,51,53,54,55,59,60,62,64,66,],[5,5,21,22,5,-2,5,5,5,5,5,5,5,5,5,5,5,-1,-13,-17,44,5,5,5,-18,54,-14,5,5,-20,5,-19,5,-21,]),'NUMBER':([0,5,9,10,11,12,13,14,15,16,17,18,21,22,32,36,37,39,42,43,44,49,53,54,55,59,60,62,64,66,],[8,8,8,-2,8,8,8,8,8,8,8,8,8,8,8,-1,-13,-17,8,8,8,-18,-14,8,8,-20,8,-19,8,-21,]),'$end':([1,10,36,37,39,49,53,59,62,66,],[0,-2,-1,-13,-17,-18,-14,-20,-19,-21,]),'ASSIGN':([2,],[9,]),'SEMICOLON':([2,3,8,20,23,24,25,26,27,28,29,30,33,50,],[-12,10,-11,-12,36,-3,-4,-5,-6,-7,-8,-9,-10,53,]),'PLUS':([2,3,8,19,20,23,24,25,26,27,28,29,30,33,34,35,47,56,],[-12,11,-11,11,-12,11,-3,-4,-5,-6,-7,-8,-9,-10,11,11,11,11,]),'MINUS':([2,3,8,19,20,23,24,25,26,27,28,29,30,33,34,35,47,56,],[-12,12,-11,12,-12,12,-3,-4,-5,-6,-7,-8,-9,-10,12,12,12,12,]),'TIMES':([2,3,8,19,20,23,24,25,26,27,28,29,30,33,34,35,47,56,],[-12,13,-11,13,-12,13,13,13,-5,-6,-7,-8,-9,-10,13,13,13,13,]),'DIVIDE':([2,3,8,19,20,23,24,25,26,27,28,29,30,33,34,35,47,56,],[-12,14,-11,14,-12,14,14,14,-5,-6,-7,-8,-9,-10,14,14,14,14,]),'LESS':([2,3,8,19,20,23,24,25,26,27,28,29,30,33,34,35,47,56,],[-12,15,-11,15,-12,15,15,15,15,15,-7,-8,-9,-10,15,15,15,15,]),'MORE':([2,3,8,19,20,23,24,25,26,27,28,29,30,33,34,35,47,56,],[-12,16,-11,16,-12,16,16,16,16,16,-7,-8,-9,-10,16,16,16,16,]),'EQUAL':([2,3,8,19,20,23,24,25,26,27,28,29,30,33,34,35,47,56,],[-12,17,-11,17,-12,17,17,17,17,17,-7,-8,-9,-10,17,17,17,17,]),'LBRACE':([4,40,],[18,43,]),'RPAREN':([8,19,20,24,25,26,27,28,29,30,33,34,35,40,47,52,56,58,],[-11,33,-12,-3,-4,-5,-6,-7,-8,-9,-10,39,40,42,50,55,58,60,]),'RBRACE':([10,31,32,36,37,38,39,45,46,49,53,57,59,61,62,65,66,],[-2,37,-15,-1,-13,-16,-17,48,49,-18,-14,59,-20,62,-19,66,-21,]),'WHILE':([37,],[41,]),'ELIF':([48,],[51,]),'ELSE':([48,62,],[52,63,]),'COLON':([63,],[64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,18,32,42,43,55,60,64,],[1,32,32,45,46,57,61,65,]),'expression':([0,5,9,11,12,13,14,15,16,17,18,21,22,32,42,43,44,54,55,60,64,],[3,19,23,24,25,26,27,28,29,30,3,34,35,3,3,3,47,56,3,3,3,]),'statement_list':([18,32,],[31,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> ID ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','parser.py',18),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expr','parser.py',22),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',26),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',27),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',28),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',29),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','parser.py',30),
  ('expression -> expression MORE expression','expression',3,'p_expression_binop','parser.py',31),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_binop','parser.py',32),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',36),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',40),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',44),
  ('statement -> DO LBRACE statement_list RBRACE','statement',4,'p_statement_do','parser.py',48),
  ('statement -> DO LBRACE statement_list RBRACE WHILE LPAREN expression RPAREN SEMICOLON','statement',9,'p_statement_do_while','parser.py',52),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',56),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser.py',57),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_statement_print','parser.py',64),
  ('statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE','statement',7,'p_statement_if','parser.py',68),
  ('statement -> IF LPAREN expression RPAREN RPAREN statement RBRACE ELIF LPAREN expression RPAREN RPAREN statement RBRACE','statement',14,'p_statement_if','parser.py',69),
  ('statement -> IF LPAREN expression RPAREN RPAREN statement RBRACE ELSE RPAREN statement RBRACE','statement',11,'p_statement_if','parser.py',70),
  ('statement -> IF LPAREN expression RPAREN RPAREN statement RBRACE ELIF LPAREN expression RPAREN RPAREN statement RBRACE ELSE COLON statement RBRACE','statement',18,'p_statement_if','parser.py',71),
]
